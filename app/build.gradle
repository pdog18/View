apply from: config

android {
    defaultConfig {
        ndk {
            //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86", "arm64-v8a", "x86_64"
        }

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
    }

    signingConfigs {
        signConfig {
            storeFile file('key')//签名文件路径，
            //keystore的路径通常使用项目根目录的相对路径，但也可以是使用绝对路径，尽管这不推荐
            storePassword 'Gj565656' //密码
            keyAlias 'key0'
            keyPassword 'Gj565656'  //密码
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.signConfig // 配置debug包的签名
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(":base")

    kapt "com.alibaba:arouter-compiler:$arouter_compiler_version"



    if (!independent) {
        getModuleNames().each {
            println("it  ===> ${it}")
            implementation project(it)
        }
    }
}

def getModuleNames() {
    def settings = new File("${rootDir}/settings.gradle")
    def names = []
    settings.withReader("UTF-8") { reader ->
        reader.eachLine {
            def array = it.split(",")
            array.each {
                def colon = it.indexOf(":")
                def module_name = it.substring(colon, it.length() - 1)
                if (module_name.contains("module")) {
                    println("implementation project ${module_name}")
                    names.push(module_name)
                } else {
                    println("not module -> ${module_name}")
                }
            }
        }
    }
    return names
}
